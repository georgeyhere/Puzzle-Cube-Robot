// capture.sv
//
// This module captures incoming pixel data and is synchronous to the
// 24 MHz clock generated by the XCLK pin of the OV7670 camera.
//
// The OV7670 outputs 640x480 @30FPS w/ VGA timing signals. 
// Each pixel is comprised of two bytes, transmitted one at a time.
// Pixels can be RGB444, 555, or 565.
//
module capture
    #(parameter X_RES = 640, 
      parameter Y_RES = 480)
    (
    input  logic        i_rstn,   // sync \active-low reset

    // OV7670 camera interface
    input  logic        i_pclk,   // camera pixel clock
    input  logic        i_vsync,  // camera start/end of frames
    input  logic        i_href,   // camera pixel data valid
    input  logic [7:0]  i_data,   // camera pixel data

    // AXI Stream Interface
    output logic [15:0] o_tdata,  // output video data
    output logic        o_tvalid, // data valid
    output logic        o_tlast,  // end of line
    output logic        o_tuser   // start of frame
    );

// LOCAL LOGIC
    logic [$clog2(X_RES)-1:0]  counterX;
    logic [$clog2(Y_RES)-1:0]  counterY;
    logic [7:0]                byte1_data;
    logic                      pixel_half;

// DATA CAPTURE
    // -> capture two bytes for each pixel
    always_ff@(posedge i_pclk) begin
        if(!i_rstn || i_vsync) begin
            o_tvalid   <= 0;
            o_tdata    <= 0;
            byte1_data <= 0;
            pixel_half <= 0;
        end
        else begin
            if(i_href) begin
                if(pixel_half) begin
                    pixel_half <= 0;
                    o_tvalid   <= 1;
                    o_tdata    <= {byte1_data, i_data};
                end
                else begin
                    pixel_half <= 1;
                    o_tvalid   <= 0;
                    byte1_data <= i_data;
                end
            end
        end
    end

// PIXEL COORDINATE
    // -> counterX: pixel x-coordinate
    // -> counterY: pixel y-coordinate
    always_ff@(posedge i_pclk) begin
        if(!i_rstn || i_vsync) begin
            counterX <= 0;
            counterY <= 0;
        end
        else begin
            if(pixel_half) begin
                counterX <= (counterX == X_RES-1) ? 0:counterX+1;
                if(counterX == X_RES-1) begin
                    counterY <= (counterY == Y_RES-1) ? 0:counterY+1;
                end
            end
        end
    end

// STATUS FLAGS
    // -> Start of Frame
    assign o_tuser = o_tvalid && (counterX == 0) && (counterY == 0);

    // -> End of Line
    assign o_tlast = o_tvalid && (counterX == X_RES-1);

endmodule
